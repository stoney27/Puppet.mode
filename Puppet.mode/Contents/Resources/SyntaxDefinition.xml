<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <name>Puppet</name>
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$?:]]></charsintokens>
        <folding toplevel="2" />
    </head>
    
    <states>
    
        <default id="Base" color="#000">
            <keywords id="Literals" color="#0000cc" inverted-color="#7d9ffa" useforautocomplete="yes">
                <string>true</string>
                <string>false</string>
                <string>nil</string>
            </keywords>
            <keywords id="Attribute Definitions" color="#514bcf" inverted-color="#7d9ffa" useforautocomplete="yes">
                <string>require</string>
                <string>include</string>
                <string>Service</string>
                <string>Exec</string>
                <string>File</string>
                <string>Package</string>
                
            </keywords>
            
            <keywords id="Functions" color="#514bcf" inverted-color="#CCFFFF" font-weight="bold" useforautocomplete="yes">
                <string>alert</string>
                <string>create_resources</string>
                <string>crit</string>
                <string>debug</string>
                <string>defined</string>
                <string>emerg</string>
                <string>err</string>
                <string>extlookup</string>
                <string>fail</string>
                <string>fqdn_rand</string>
                <string>generate</string>
                <string>include</string>
                <string>info</string>
                <string>inline_template</string>
                <string>md5</string>
                <string>notice</string>
                <string>realize</string>
                <string>regsubst</string>
                <string>require</string>
                <string>search</string>
                <string>sha1</string>
                <string>shellquote</string>
                <string>split</string>
                <string>sprintf</string>
                <string>tag</string>
                <string>tagged</string>
                <string>template</string>
                <string>versioncmp</string>
                <string>warning</string>
            </keywords>
            
            <keywords id="Metaparameters" color="#3333ff" inverted-color="#CCFFFF" font-weight="bold" useforautocomplete="yes">
                <string>alias</string>
                <string>audit</string>
                <string>before</string>
                <string>case</string>
                <string>check</string>
                <string>class</string>
                <string>default</string>
                <string>define</string>
                <string>else</string>
                <string>elsif</string>
                <string>if</string>
                <string>loglevel</string>
                <string>module</string>
                <string>noop</string>
                <string>notify</string>
                <string>require</string>
                <string>schedule</string>
                <string>service</string>
                <string>stage</string>
                <string>subscribe</string>
                <string>tag</string>
                <string>unless</string>
                
            </keywords>
            
            
            <keywords id="Resource Types" color="#3333ff" inverted-color="#CCFFFF" font-weight="bold" useforautocomplete="yes">
                <string>augeas</string>
                <string>computer</string>
                <string>cron</string>
                <string>exec</string>
                <string>file</string>
                <string>filebucket</string>
                <string>group</string>
                <string>host</string>
                <string>interface</string>
                <string>k5login</string>
                <string>macauthorization</string>
                <string>mailalias</string>
                <string>maillist</string>
                <string>mcx</string>
                <string>mount</string>
                <string>nagios_command</string>
                <string>nagios_contact</string>
                <string>nagios_contactgroup</string>
                <string>nagios_host</string>
                <string>nagios_hostdependency</string>
                <string>nagios_hostescalation</string>
                <string>nagios_hostextinfo</string>
                <string>nagios_hostgroup</string>
                <string>nagios_service</string>
                <string>nagios_servicedependency</string>
                <string>nagios_serviceescalation</string>
                <string>nagios_serviceextinfo</string>
                <string>nagios_servicegroup</string>
                <string>nagios_timeperiod</string>
                <string>notify</string>
                <string>package</string>
                <string>resources</string>
                <string>router</string>
                <string>schedule</string>
                <string>scheduled_task</string>
                <string>selboolean</string>
                <string>selmodule</string>
                <string>service</string>
                <string>ssh_authorized_key</string>
                <string>sshkey</string>
                <string>stage</string>
                <string>tidy</string>
                <string>user</string>
                <string>vlan</string>
                <string>yumrepo</string>
                <string>zfs</string>
                <string>zone</string>
                <string>zpool</string>
            </keywords>
            
            <keywords id="Attributes" color="#b40000" inverted-color="#7d9ffa" font-style="italic" font-weight="normal" useforautocomplete="yes">
                <string>action_url</string>
                <string>active_checks_enabled</string>
                <string>address</string>
                <string>address1</string>
                <string>address2</string>
                <string>address3</string>
                <string>address4</string>
                <string>address5</string>
                <string>address6</string>
                <string>adminfile</string>
                <string>age</string>
                <string>alias</string>
                <string>allowcdrom</string>
                <string>allowdupe</string>
                <string>arguments</string>
                <string>atboot</string>
                <string>attribute_membership</string>
                <string>attributes</string>
                <string>auth_membership</string>
                <string>auths</string>
                <string>backup</string>
                <string>baseurl</string>
                <string>binary</string>
                <string>blockdevice</string>
                <string>can_submit_commands</string>
                <string>category</string>
                <string>changes</string>
                <string>check_command</string>
                <string>check_freshness</string>
                <string>check_interval</string>
                <string>check_period</string>
                <string>checksum</string>
                <string>command</string>
                <string>command_line</string>
                <string>command_name</string>
                <string>comment</string>
                <string>configfiles</string>
                <string>contact_group</string>
                <string>contact_groups</string>
                <string>contact_name</string>
                <string>contactgroup_members</string>
                <string>contactgroup_name</string>
                <string>contacts</string>
                <string>content</string>
                <string>context</string>
                <string>control</string>
                <string>cost</string>
                <string>creates</string>
                <string>ctime</string>
                <string>cwd</string>
                <string>descr</string>
                <string>description</string>
                <string>device</string>
                <string>directoryservice</string>
                <string>display_name</string>
                <string>dump</string>
                <string>email</string>
                <string>enable</string>
                <string>enabled</string>
                <string>enablegroups</string>
                <string>ensure</string>
                <string>environment</string>
                <string>event_handler</string>
                <string>event_handler_enabled</string>
                <string>exclude</string>
                <string>expiry</string>
                <string>failovermethod</string>
                <string>failure_prediction_enabled</string>
                <string>first_notification_delay</string>
                <string>flap_detection_enabled</string>
                <string>flap_detection_options</string>
                <string>flavor</string>
                <string>force</string>
                <string>freshness_threshold</string>
                <string>fstype</string>
                <string>gid</string>
                <string>gpgcheck</string>
                <string>gpgkey</string>
                <string>group</string>
                <string>groupadd</string>
                <string>groups</string>
                <string>hasrestart</string>
                <string>hasstatus</string>
                <string>high_flap_threshold</string>
                <string>home</string>
                <string>host_aliases</string>
                <string>host_name</string>
                <string>host_notification_commands</string>
                <string>host_notification_options</string>
                <string>host_notification_period</string>
                <string>host_notifications_enabled</string>
                <string>hostgroups</string>
                <string>hour</string>
                <string>http_caching</string>
                <string>ia_load_module</string>
                <string>icon_image</string>
                <string>icon_image_alt</string>
                <string>ignore</string>
                <string>includepkgs</string>
                <string>initial_state</string>
                <string>install_options</string>
                <string>instance</string>
                <string>ip</string>
                <string>ip_address</string>
                <string>keepalive</string>
                <string>key</string>
                <string>key_membership</string>
                <string>keys</string>
                <string>ldap</string>
                <string>links</string>
                <string>load_path</string>
                <string>logoutput</string>
                <string>low_flap_threshold</string>
                <string>mailserver</string>
                <string>managehome</string>
                <string>manifest</string>
                <string>matches</string>
                <string>max_check_attempts</string>
                <string>members</string>
                <string>membership</string>
                <string>metadata_expire</string>
                <string>minute</string>
                <string>mirrorlist</string>
                <string>mode</string>
                <string>monthday</string>
                <string>mtime</string>
                <string>name</string>
                <string>onlyif</string>
                <string>options</string>
                <string>owner</string>
                <string>pager</string>
                <string>pass</string>
                <string>password</string>
                <string>password_max_age</string>
                <string>password_min_age</string>
                <string>path</string>
                <string>pattern</string>
                <string>periodmatch</string>
                <string>platform</string>
                <string>port</string>
                <string>posix</string>
                <string>priority</string>
                <string>profile_membership</string>
                <string>profiles</string>
                <string>project</string>
                <string>protect</string>
                <string>provider</string>
                <string>proxy</string>
                <string>proxy_password</string>
                <string>proxy_username</string>
                <string>purge</string>
                <string>range</string>
                <string>realname</string>
                <string>recurse</string>
                <string>recurselimit</string>
                <string>refresh</string>
                <string>refreshonly</string>
                <string>register</string>
                <string>remounts</string>
                <string>repeat</string>
                <string>replace</string>
                <string>responsefile</string>
                <string>restart</string>
                <string>retain_nonstatus_information</string>
                <string>retain_status_information</string>
                <string>returns</string>
                <string>rmdirs</string>
                <string>role_membership</string>
                <string>roles</string>
                <string>root</string>
                <string>selinux_ignore_defaults</string>
                <string>selmoduledir</string>
                <string>selrange</string>
                <string>selrole</string>
                <string>seltype</string>
                <string>seluser</string>
                <string>service_notification_commands</string>
                <string>service_notification_options</string>
                <string>service_notification_period</string>
                <string>service_notifications_enabled</string>
                <string>shell</string>
                <string>size</string>
                <string>source</string>
                <string>sourceselect</string>
                <string>special</string>
                <string>start</string>
                <string>status</string>
                <string>stop</string>
                <string>syncversion</string>
                <string>system</string>
                <string>target</string>
                <string>timeout</string>
                <string>tries</string>
                <string>trigger</string>
                <string>try_sleep</string>
                <string>type</string>
                <string>uid</string>
                <string>unless</string>
                <string>unless_system_user</string>
                <string>url</string>
                <string>use</string>
                <string>user</string>
                <string>value</string>
                <string>vendor</string>
                <string>webserver</string>
                <string>windows</string>
                <string>working_dir</string>
            </keywords>
            
            <keywords id="Builtin Functions" color="#881350" inverted-color="#9469f9"  font-style="normal" useforautocomplete="yes">
                <string>alert</string>
                <string>create_resources</string>
                <string>crit</string>
                <string>debug</string>
                <string>defined</string>
                <string>emerg</string>
                <string>err</string>
                <string>extlookup</string>
                <string>fail</string>
                <string>fqdn_rand</string>
                <string>generate</string>
                <string>include</string>
                <string>info</string>
                <string>inline_template</string>
                <string>md5</string>
                <string>notice</string>
                <string>realize</string>
                <string>regsubst</string>
                <string>require</string>
                <string>search</string>
                <string>sha1</string>
                <string>shellquote</string>
                <string>split</string>
                <string>sprintf</string>
                <string>tag</string>
                <string>tagged</string>
                <string>template</string>
                <string>versioncmp</string>
                <string>warning</string>

            </keywords>

            <keywords id="Builtin Globals" color="#a1617a" inverted-color="#9e5e77"  font-style="normal" font-weight="normal" useforautocomplete="yes">
                <!--Ones with chars not defined as variable parse chars won't work-->
                <!--Need a clever way around this as adding them makes things not parse right everywhere else-->
                <string>$!</string>
                <string>$@</string>
                <string>$0</string>
                <string>$1</string>
                <string>$2</string>
                <string>$3</string>
                <string>$4</string>
                <string>$5</string>
                <string>$6</string>
                <string>$7</string>
                <string>$8</string>
                <string>$9</string>
                <string>$$</string>
                <string>$?</string>
                <string>$DEBUG</string>
                <string>$defout</string>
                <string>$F</string>
                <string>$FILENAME</string>
                <string>$LOAD_PATH</string>
                <string>$SAFE</string>
                <string>$stdin</string>
                <string>$stdout</string>
                <string>$stderr</string>
                <string>$VERBOSE</string>
                <string>TRUE</string>
                <string>FALSE</string>
                <string>NIL</string>
                <string>ARGF</string>
                <string>ARGV</string>
                <string>DATA</string>
                <string>ENV</string>
                <string>RUBY_PLATFORM</string>
                <string>RUBY_RELEASE_DATE</string>
                <string>RUBY_VERSION</string>
                <string>STDERR</string>
                <string>STDIN</string>
                <string>STDOUT</string>
                <string>TOPLEVEL_BINDING</string>
                <string>=></string>
                
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$/)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$\\)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$,)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$;)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$\.)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$&lt;)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$&gt;)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$:)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$-x)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$_)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$~)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$&amp;)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$`)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$')(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$\+)(?=[^[_A-Za-z0-9]]|$)</regex>
            </keywords>
            <keywords id="Numbers" color="#0000ff" inverted-color="#4afc5b"  font-style="normal" font-weight="normal" useforautocomplete="no">
                <!-- Floating point, sci notation -->
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)([+-]?[0-9]+[eE][+-]?[0-9]+)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)([+-]?[0-9]+\.[0-9]+[eE][+-]?[0-9]+)(?=[^[_A-Za-z0-9]]|$)</regex>
                <!-- Floating point, NOT sci notation. -->
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)([+-]?[0-9]+(?:\.[0-9]+)?)(?=[^[_A-Za-z0-9]]|$)</regex>
                <!-- Integers that can have a leading +/- and underscores -->
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)([+-]?(?:[0-9]*_)*[0-9]+)(?=[^[_A-Za-z0-9.]]|$)</regex>
                <!-- Numbers in a different base -->
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(0[xX][0-9a-fA-F]+)(?=[^[_A-Za-z0-9]]|$)</regex>
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(0[bB][01]+)(?=[^[_A-Za-z0-9]]|$)</regex>
                <!-- Numbers generated by looking at character constants, like ?d and ?\n -->
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\?(\\)?[!-~])(?=[^[-_A-Za-z0-9]]|$)</regex>
            </keywords>
            <keywords id="Symbols" color="#d6771c" inverted-color="#fac586"  font-style="normal" font-weight="normal" useforautocomplete="no">
                <regex>(?&lt;!:)(:(?:(?:@@|@|\$)?[A-Za-z_][A-Za-z_0-9]*[\?!=]?|\[\]=?))</regex>
            </keywords>
            <keywords id="Instance Variables" color="#c94b16" inverted-color="#6699cc"  font-style="normal" font-weight="normal" useforautocomplete="no">
                <regex>(?&lt;=[^[_A-Za-z0-9@:]]|^)(@[A-Za-z0-9_]+)(?=[^[_A-Za-z0-9]]|$)</regex>
            </keywords>
            <keywords id="Class Variables" color="#008c8c" inverted-color="#73ffff"  font-style="normal" font-weight="normal" useforautocomplete="no">
                <regex>(?&lt;=[^[_A-Za-z0-9:]]|^)(class\s+[A-Za-z0-9_:]+)(?=[^[_A-Za-z0-9:]]|$)</regex>
            </keywords>
            <keywords id="Global Variables" color="#8a578f" inverted-color="#a370a8"  font-style="normal" font-weight="normal" useforautocomplete="no">
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$[A-Za-z0-9_:]+)(?=[^[_A-Za-z0-9:]]|$)</regex>
            </keywords>
            <keywords id="Local Variables" color="#8a578f" inverted-color="#a370a8"  font-style="normal" font-weight="normal" useforautocomplete="no">
                <regex>(?&lt;=[^[_A-Za-z0-9]]|^)(\$[A-Za-z0-9_]+)(?=[^[_A-Za-z0-9]]|$)</regex>
            </keywords>
            <keywords id="Hexadecimal Characters" color="#00f" inverted-color="#4267d7" useforautocomplete="no">
                <regex>(\\x[0-9a-fA-F]{2,4}|\\x\{[0-9a-fA-F]{2,4}\})</regex>
            </keywords>
        
            <state id="String with double quotes" type="string" color="#008100" inverted-color="#f28720"  font-style="normal" font-weight="normal">
                <begin><regex>"</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>

                <state id="Interpolation"  color="#3e5f5e" inverted-color="#669999"  font-style="italic" font-weight="normal" >
                <begin><regex>#{</regex></begin>
                <end><regex>}</regex></end>
                <import />
                </state>
            </state>
    
            <state id="String with single quotes" type="string" color="#008100" inverted-color="#f48700"  font-style="normal" font-weight="normal">
                <begin><regex>(?&lt;!\$)(?:')</regex></begin>
                <end><regex>(((?&lt;!\\)(\\\\)*)|^)'</regex></end>
            </state>


            <!-- actually heredocs start in the next line, so a way to recolor everything from start to end of line again in normal colors would be good. -->
            <state id="Heredoc" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><string>(?:(?&lt;=[=\s+*\({\[])|^)&lt;&lt;(?:(?'heredoc'[_A-Za-z][A-Za-z0-9_]*)|(?:'\g'heredoc'')|(?:"\g'heredoc'"))</string></begin>
                <end><regex>^(?#see-insert-start-group:heredoc)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <state id="Heredoc Indented End" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><string>(?:(?&lt;=[=\s+*\({\[])|^)&lt;&lt;\-?(?:(?'heredocindented'[_A-Za-z][A-Za-z0-9_]*)|(?:'\g'heredocindented'')|(?:"\g'heredocindented'"))</string></begin>
                <end><regex>^[ \t]*(?#see-insert-start-group:heredocindented)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <state id="Percent Strings" type="string" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><regex>%(?:Q|q)?(?'percentstringchar'[^\s{\[\(&lt;A-Za-z0-9>])</regex></begin>
                <end><regex>(?#see-insert-start-group:percentstringchar)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <!-- these work with all kinds of bracets, {[(<>)]} http://www.zenspider.com/Languages/Ruby/QuickRef.html -->
            <state id="Percent Strings {" type="string" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><regex>%[Qq]?{</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)}</regex></end>
                <state-link state="Interpolation"/>
                <state id="UnescapedCurlyBracketRecursive" type="string" foldable="no">
                    <begin><regex>(?:(?:(?&lt;!\\)(?:\\\\)*)|^){</regex></begin>
                    <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)}</regex></end>
                    <import state="Percent Strings {" />
                </state>
            </state>

            <state id="Percent Strings (" type="string" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><regex>%[Qq]?\(</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)\)</regex></end>
                <state-link state="Interpolation"/>
                <state id="UnescapedNormalBracketRecursive" type="string" foldable="no">
                    <begin><regex>(?:(?:(?&lt;!\\)(?:\\\\)*)|^)\(</regex></begin>
                    <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)\)</regex></end>
                    <import state="Percent Strings (" />
                </state>
            </state>

            <state id="Percent Strings &lt;" type="string" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><regex>%[Qq]?&lt;</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)></regex></end>
                <state-link state="Interpolation"/>
                <state id="UnescapedAngelBracketRecursive" type="string" foldable="no">
                    <begin><regex>(?:(?:(?&lt;!\\)(?:\\\\)*)|^)&lt;</regex></begin>
                    <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)></regex></end>
                    <import state="Percent Strings &lt;" />
                </state>
            </state>

            <state id="Percent Strings [" type="string" color="#760f15" inverted-color="#f48700" font-weight="normal" font-style="normal" foldable="yes">
                <begin><regex>%[Qq]?\[</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)]</regex></end>
                <state-link state="Interpolation"/>
                <state id="UnescapedSquareBracketRecursive" type="string" foldable="no">
                    <begin><regex>(?:(?:(?&lt;!\\)(?:\\\\)*)|^)\[</regex></begin>
                    <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)\]</regex></end>
                    <import state="Percent Strings [" />
                </state>
            </state>
    

            <!-- Execution Coloring -->

            <state id="Backticks" color="#b80f15" inverted-color="#737373" font-style="normal" font-weight="normal">
                <begin><regex>(?&lt;!\$)(?:`)</regex></begin>
                <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)`</regex></end>
            </state>
            
            <state id="Percent Execution" type="string" color="#b80f15" inverted-color="#737373" font-style="normal" font-weight="normal" foldable="yes">
                <begin><regex>%x(?'percentexecutionchar'[^\s{\[\(&lt;A-Za-z0-9])</regex></begin>
                <end><regex>(?#see-insert-start-group:percentexecutionchar)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <!-- these work with all kinds of bracets, {[(<>)]} http://www.zenspider.com/Languages/Ruby/QuickRef.html -->
            <state id="Percent Execution {" type="string" color="#b80f15" inverted-color="#737373" font-style="normal" font-weight="normal" foldable="yes">
                <begin><regex>%x{</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)}</regex></end>
                <import state="Percent Strings {" />
            </state>

            <state id="Percent Execution (" type="string" color="#b80f15" inverted-color="#737373" font-style="normal" font-weight="normal" foldable="yes">
                <begin><regex>%x\(</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)\)</regex></end>
                <import state="Percent Strings (" />
            </state>

            <state id="Percent Execution &lt;" type="string" color="#b80f15" inverted-color="#737373" font-style="normal" font-weight="normal" foldable="yes">
                <begin><regex>%x&lt;</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)></regex></end>
                <import state="Percent Strings &lt;" />
            </state>

            <state id="Percent Execution [" type="string" color="#b80f15" inverted-color="#737373" font-style="normal" font-weight="normal" foldable="yes">
                <begin><regex>%x\[</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)]</regex></end>
                <import state="Percent Strings [" />
            </state>

            <!-- Regex coloring >
            <state id="Regexp" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>(?&lt;!\d)(?:/)(?=[^/\r\n]*/(?:$|[^\d]))</regex></begin>
                <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)/</regex></end>
            </state>
-->

            <state id="Regexp" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>(?x)(?:^|(?&lt;=[=>~(:\[,\|&amp;;]|(?:\s|;)when\s|(?:\s|;)or\s|(?:\s|;)and\s|(?:\s|;)not\s|(?:\s|;|\.)index\s|(?:\s|;|\.)scan\s|(?:\s|;|\.)sub\s|(?:\s|l|\.)sub!\s|(?:\s|;|\.)gsub\s|(?:\s|;|\.)gsub!\s|(?:\s|;|\.)match\s|(?:\s|;)if\s|(?:\s|;)elsif\s|(?:\s|;)while\s|(?:\s|;)unless\s)|(?&lt;=^when\s|^index\s|^scan\s|^sub\s|^gsub\s|^sub!\s|^gsub!\s|^match\s|^if\s|^elsif\s|^while\s|^unless\s))\s*(?:/)(?![*+{}?\n\r])|(?&lt;!\d)(?:/)[^"'](?=[^/\r\n]*/(?:$|[^\d]))</regex></begin>
                <end><regex>(?:(?:(?&lt;!\\)(\\\\)*)|^)/[eimnosux]*</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <state id="Percent Regex" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>%r(?'percentregularchar'[^\s{\[\(&lt;A-Za-z0-9])</regex></begin>
                <end><regex>(?#see-insert-start-group:percentregularchar)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <!-- these work with all kinds of bracets, {[(<>)]} http://www.zenspider.com/Languages/Ruby/QuickRef.html -->
            <state id="Percent Regex {" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>%r{</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)}</regex></end>
                <import state="Percent Strings {" />
            </state>

            <state id="Percent Regex (" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>%r\(</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)\)</regex></end>
                <import state="Percent Strings (" />
            </state>

            <state id="Percent Regex &lt;" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>%r&lt;</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)></regex></end>
                <import state="Percent Strings &lt;" />
            </state>

            <state id="Percent Regex [" color="#c700c2" inverted-color="#ff38fa"  font-style="normal" font-weight="normal">
                <begin><regex>%r\[</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)]</regex></end>
                <import state="Percent Strings [" />
            </state>

            <!-- Symbol Coloring -->
            <state id="Percent Symbol"      color="#d6771c" inverted-color="#fac586"  font-style="normal" font-weight="normal">
                <begin><regex>%s(?'percentsymbolchar'[^\s{\[\(&lt;A-Za-z0-9])</regex></begin>
                <end><regex>(?#see-insert-start-group:percentsymbolchar)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <!-- these work with all kinds of bracets, {[(<>)]} http://www.zenspider.com/Languages/Ruby/QuickRef.html -->
            <state id="Percent Symbol {"    color="#d6771c" inverted-color="#fac586"  font-style="normal" font-weight="normal">
                <begin><regex>%s{</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)}</regex></end>
                <import state="Percent Strings {" />
            </state>

            <state id="Percent Symbol ("    color="#d6771c" inverted-color="#fac586"  font-style="normal" font-weight="normal">
                <begin><regex>%s\(</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)\)</regex></end>
                <import state="Percent Strings (" />
            </state>

            <state id="Percent Symbol &lt;" color="#d6771c" inverted-color="#fac586"  font-style="normal" font-weight="normal">
                <begin><regex>%s&lt;</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)></regex></end>
                <import state="Percent Strings &lt;" />
            </state>

            <state id="Percent Symbol ["    color="#d6771c" inverted-color="#fac586"  font-style="normal" font-weight="normal">
                <begin><regex>%s\[</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)]</regex></end>
                <import state="Percent Strings [" />
            </state>

            <!-- W array Coloring -->
            <state id="Percent Array"      color="#760f15" inverted-color="#f48700"  font-style="normal" font-weight="normal">
                <begin><regex>%[wW](?'percentarraychar'[^\s{\[\(&lt;A-Za-z0-9])</regex></begin>
                <end><regex>(?#see-insert-start-group:percentarraychar)</regex></end>
                <state-link state="Interpolation"/>
            </state>

            <!-- these work with all kinds of bracets, {[(<>)]} http://www.zenspider.com/Languages/Ruby/QuickRef.html -->
            <state id="Percent Array {"    color="#760f15" inverted-color="#f48700"  font-style="normal" font-weight="normal">
                <begin><regex>%[wW]{</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)}</regex></end>
                <import state="Percent Strings {" />
            </state>

            <state id="Percent Array ("    color="#760f15" inverted-color="#f48700"  font-style="normal" font-weight="normal">
                <begin><regex>%[wW]\(</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)\)</regex></end>
                <import state="Percent Strings (" />
            </state>

            <state id="Percent Array &lt;" color="#760f15" inverted-color="#f48700"  font-style="normal" font-weight="normal">
                <begin><regex>%[wW]&lt;</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)></regex></end>
                <import state="Percent Strings &lt;" />
            </state>

            <state id="Percent Array ["    color="#760f15" inverted-color="#f48700"  font-style="normal" font-weight="normal">
                <begin><regex>%[wW]\[</regex></begin>
                <end><regex>(?:(?&lt;!\\)(\\\\)*)]</regex></end>
                <import state="Percent Strings [" />
            </state>

            <state id="Singleline Comment" type="comment" color="#3399ff" inverted-color="#ff4a4a" font-style="italic" font-weight="normal">
                <begin><regex>#</regex></begin>
                <end><regex>[\n\r]</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>
            
            
            <state id="POD Comments" type="comment" color="#800000" inverted-color="#ff7f7f"  font-style="normal" font-weight="normal">
                <begin><regex>(?:^=begin)</regex></begin>
                <end><regex>^=end</regex></end>
            </state>

            <state id="Block" type="block" foldable="yes">
                <begin><regex>(?:(?:^|=)[ \t]*(?:(?:(?:if|unless|while|until)(?:[ \t]+|(?=\()))|(?:case[ \t]+\g'ruby_ident'[ \t]?)|(?:for[ \t]+\g'ruby_ident'[ \t]+in(?:[^\n\r]+do)?)|(?:case))|\b(?:(?:class(?:(?:[ \t]+(?'ruby_ident'(?'ruby_ident_part'[a-zA-Z_][a-zA-Z0-9_]*)(?:(?:\.|::)\g'ruby_ident_part')*)(?:[ \t]+&lt;[ \t]+\g'ruby_ident')?)|(?:[ \t]*&lt;&lt;)))|(?:module[ \t]+[a-zA-Z_][a-zA-Z0-9_]*)|\bdo\b(?:[ \t]*\|[^\n\r|]+\|)?|(?:def[ \t]+(?:(?'ruby_operator_methods'&amp;|\||\^|&lt;=>|===|==|=~|>>|\?|\!|>=|>|&lt;=|\+@|\-@|\+|\-|\*\*|\*|/|%|&lt;&lt;|&lt;|~|\[\]|\[\]=)|\g'ruby_ident'\g'ruby_operator_methods'?))))</regex></begin>
                <end><regex>\bend\b</regex></end>
                <import />
            </state>

            <state id="BeginBlocks" type="block" foldable="yes">
                <begin><regex>\bbegin\b</regex></begin>
                <end><regex>\bend(?:[ \t]+(?:while|if|unless|until))?\b</regex></end>
                <import />
            </state>

            <!-- this should not match normal hash literals. most commonly used in || {} in rails -->

            <state id="CurlyBlocks" type="block" foldable="yes">
                <begin><regex>{(?:[ \t]*\|[^\n\r|]+\|)?</regex></begin>
                <end><regex>}</regex></end>
                <import />
            </state>


        </default>
        
    </states>

</syntax>
